<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en"><html><head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
   <meta name="Author" content="Krzysztof Barteczko">
   <meta name="GENERATOR" content="Mozilla/4.61 [en] (OS/2; U) [Netscape]"><title>Krzysztof Barteczko, WPR - cwicenia z2</title></head><body>

<center><span style="text-transform: capitalize; font-variant: small-caps"><b>Zadania do wykonania</b></span><hr></center>
<p><b>ZADANIE-1. Generator liczb pseudolosowych (max 6 punktów)</b><br>
<br>
Napisaæ program symuluj±cy pewien rodzaj gry w ko¶ci. <br>
W grze bierze udzia³ 2 graczy. Ka¿dy z nich dysponuje zadan± sum± pieniêdzy 
przeznaczon± na grê. <br>
Przed ka¿d± rund± gracze &quot;stawiaj±&quot; jak±¶ sumê pieniêdzy (wybran± w sposób 
losowy z przedzia³u 1 - max mo¿liwa). Pulê zgarnia gracz, który wyrzuci wiêksz± 
liczbê oczek. <br>
Gra jest kontynuowana do chwili, gdy któremu¶ z graczy zabraknie pieniêdzy lub 
gdy czas symulacji przekroczy zadan± liczbê sekund.<br>
<br>
Przed zakoñczeniem programu nale¿y wyprowadziæ na konsolê &quot;historiê&quot;&nbsp; gry.<br>
<br>
Np. je¶li gracze dysponuj± kwotami 100 i 100 i obstawili 10 i 20 w 1 rundzie 
oraz 20 i 80 w drugiej, to historia gry wygl±da nastêpuj±co<br>
<br>
Gracz A - kwota inicjalna 100<br>
Gracz B - kwota inicjalna 100<br>
<br>
Runda &nbsp;Stawka GraczA-oczka &nbsp;GraczB-oczka &nbsp;GraczA-kwota GraczB-kwota &nbsp;<br>
1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;10+20 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;5 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 120 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 80<br>
2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;20+80 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 200 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0<br>
&nbsp;</p>
<hr width="100%" SIZE="2"><b><br>
ZADANIE-2. Operacje na bitach (4 punkty)</b><br>
<br>
Napisaæ metodê, która zwraca tablicê pozycji na których znajduj± siê bity 
jedynkowe w liczbie typu int przekazanej jako argument metody. <br>
&nbsp;<hr width="100%" SIZE="2">&nbsp;<br>
<b>ZADANIE-3. Sortowanie (6 punktów)<br>
<br>
</b>Stworzyæ klasê <b>Input ze </b>statycznymi metodami <b>getIntArray()</b> 
oraz <b>getDoubleArray()</b>, które - odpowiednio - zwracaj± tablice liczb 
ca³kowitych i rzeczywistych<b>,</b> podawanych przez u¿ytkownika jako ciagi 
znaków rozdzielonych spacjami w dialogu wej¶ciowym.<br>
<br>
Zapewniæ mo¿liwo¶æ poprawienia danych w przypadku b³êdu przy wprowadzaniu 
danych.<br>
<br>
Pokazaæ dzia³anie klasy w programie, który:<br>
pozwala na wprowadzenie dwóch tablic: liczb ca³kowitych i liczb rzeczywistych, 
po czym wyprowadza obie tablice <b>posortowane</b> odpowiednio w porz±dku <b>
malej±cym i rosn±cym.</b><p><b>Rozwa¿yæ inn± wersjê programu gdzie dane do 
tablic pobierane s± z pliku tekstowego.</b></p>
<hr><b><br>
ZADANIE- 4 (max. 8 punktów)</b> <br>
<br>
Stworzyæ klasê <b>MonthInYear</b>, której obiekt reprezentuj± wybrany miesi±c w 
wybranym roku &nbsp;i dostarczyæ w niej metodê getDays() zwracaj±c± liczbê dni 
miesi±ca w roku. <br>
Klasa ma dzia³aæ dla <b>dowolnych</b> lat i miesiêcy kalendarza gregoriañskiego 
i juliañskiego (poprzedzaj±cego gregoriañski).<br>
<br>
Mo¿liwy przyk³ad u¿ycia (jednocze¶nie wyja¶nia w jaki sposob obiekty klasy maj± 
byæ tworzone i jak podawaæ dane dotycz±ce lat i miesiêcy) :<br>
<br>
int year = 2002;<br>
String month = &quot;styczeñ&quot;;<br>
MonthInYear monthObject = new MonthInYear(month, year);<br>
int ldni = &nbsp;.... // tu wywo³anie metody getDays()<br>
System.out.println(&quot;Miesi±c &quot; + month + &quot; w roku &quot; + year + &quot; zawiera &quot; + ldni);<br>
<br>
Oprócz metody <b>getDays()</b> dostarczyæ w klasie metod:<ul>
	<li>pobierania nazwy miesi±ca getMonthName() </li>
	<li>uzyskiwania rzymskiego numeru miesi±ca (I, II, III, IV itd.) 
	getMonthSymbol()
	</li>
	<li>uzyskiwania numeru miesi±ca (1,2,3 ... 12) &nbsp;getMonthNumber()
	</li>
	<li>stwierdzania czy rok jest przestêpny isLeapYear() </li>
</ul>
<br>
W klasie testuj±cej TestMonth:<br>
&nbsp;<ul>
	<li>zdefiniowaæ metodê <b>createMonthInYear()</b>, która zwraca referencjê 
	do obiektu klasy MonthInYear, utworzonego na podstawie podanych przez 
	u¿ytkownika w dialogach wej¶ciowym miesi±ca i roku.
	</li>
	<li>zdefiniowaæ metodê <b>showInfo(MonthInYear)</b>, która podaje - w 
	okienku komunikatów - informacje o przekazanym jako argument miesi±cu w 
	postaci: 
	</li>
</ul>
miesi±c rzymski . rok (np. XII.2002)<br>
nazwa miesi±ca rok <br>
który miesi±c roku<br>
+ dodatkowy komunikat je¿eli rok jest przestêpny.<br>
<br>
Powinno to wygl±dac tak:<br>
<br>
&nbsp;---- je¿eli podano w³a¶ciwe dane i rok nie jest przestêpny<img height="130" alt="rys" src="rys1.jpg" width="262" align="left" border="1"><p>&nbsp;</p>
<p>&nbsp;</p>
<p><br>
<br>
<br>
---- je¿eli podano w³asciwe dane i rok jest przestêpny<img height="168" alt="rys" src="rys2.jpg" width="262" align="left" border="1">
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
&nbsp;</p>
<p>--- je¿eli podano niew³a¶ciwe dane (np. stuczeñ, zamiast styczeñ) - komunikat 
o b³êdzie (te¿ w okienku dialogowym). <br>
<br>
U¿yæ metod <b>createMonth()</b> i <b>showInfo() </b>w pêtli iteracyjnej 
koñcz±cej siê, gdy u¿ytkownik zrezygnuje z wprowadzania danych.<br>
<br>
<b>Informacja o latach przestêpnych:</b><br>
Rok przestêpny ma 366 dni i luty w takim roku ma dni 29.<br>
Rok jest przestêpny, gdy dzieli siê przez 4.<br>
Ale -&nbsp; od momentu wprowadzenia kalendarza gregoriañskiego (pa¼dziernik 1582) - 
rok nie jest przestêpny, je¶li dzieli siê przez 100. Ale - mimo wszystko - w 
kalendarzu gregoriañskim lata, dziel±ce siê przez 100, bêd± przestêpne, je¶li 
dziel± siê przez 400.</p>
<hr>
<p><b>ZADANIE- 5 (max. 6 punktów)</b> </p>
<p class="MsoNormal">Zdefiniuj klasê <b>Sequence</b> a w niej zdefinuj wersje:
</p>
<ul>
	<li>
	<p class="MsoNormal">rekurencyjn±, </li>
	<li>
	<p class="MsoNormal">iteracyjn± </li>
	<li>
	<p class="MsoNormal">obliczeniow±&nbsp;(wykorzystujac± wzór jawny na a(n) )</li>
</ul>
<p class="MsoNormal">metody <b><span style="color:maroon">int sequence(int n)</span></b> 
dostarczaj±c± n-ty wyraz ci±gu okre¶lonego rekurencyjnie:&nbsp;&nbsp; </p>
<p class="MsoNormal">a(0) = 1, a(1) = -3 ;&nbsp; a(n) = 6<span style="font-family: Symbol">&middot;</span>a(n-1) 
- 9<span style="font-family: Symbol">&middot;</span>a(n-2)&nbsp; dla&nbsp; n&gt;=2</p>
<p class="MsoNormal">&nbsp;i porównaj czasy realizacji ka¿dej z nich dla du¿ej 
liczby n.&nbsp;&nbsp; </p>
<span style="font-family: Times New Roman"><b>Wskazówka</b>: Do pomiaru czasu 
przebiegu fragmentu programu wykorzystaæ funkcjê <b><span style="color:maroon">
System.currentTimeMillis();</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;</span><hr><hr>
<p>
<br>
</p>
</body></html>